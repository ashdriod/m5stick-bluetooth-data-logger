name: Build & Package PySide6 App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # macOS-specific dependencies
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements-macos.txt

    # Linux & Windows dependencies
    - name: Install dependencies (Linux & Windows)
      if: matrix.os != 'macos-latest'
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements-common.txt

    # Build with PyInstaller
    - name: Build App
      run: |
        pyinstaller --noconfirm --onefile --windowed --name M5Logger app/main.py

    # Package macOS .dmg
    - name: Package for macOS
      if: matrix.os == 'macos-latest'
      run: |
        brew install create-dmg
        mkdir -p mac_package/M5Logger.app/Contents/MacOS
        mkdir -p mac_package/M5Logger.app/Contents/Resources
        cp dist/M5Logger mac_package/M5Logger.app/Contents/MacOS/M5Logger
        
        # Create Info.plist
        cat <<EOF > mac_package/M5Logger.app/Contents/Info.plist
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>M5Logger</string>
            <key>CFBundleIdentifier</key>
            <string>com.m5logger.app</string>
            <key>CFBundleName</key>
            <string>M5Logger</string>
            <key>CFBundleVersion</key>
            <string>1.0</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
        </dict>
        </plist>
        EOF
        
        chmod +x mac_package/M5Logger.app/Contents/MacOS/M5Logger
        rm -f M5Logger.dmg
        create-dmg \
          --volname "M5Logger" \
          --window-pos 200 120 \
          --window-size 600 300 \
          --icon-size 100 \
          --app-drop-link 425 120 \
          M5Logger.dmg \
          mac_package/

    # Package Linux AppImage - Ubuntu 22.04 Compatible
    - name: Package for Linux (.AppImage)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        # Install dependencies including fonts
        sudo apt-get update && sudo apt-get install -y libfuse2 desktop-file-utils imagemagick fonts-liberation
        
        # Download AppImageTool
        wget https://github.com/AppImage/AppImageKit/releases/latest/download/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage
        
        # Create proper AppDir structure
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        
        # Copy executable
        cp dist/M5Logger AppDir/usr/bin/M5Logger
        chmod +x AppDir/usr/bin/M5Logger
        
        # Create a proper PNG icon (256x256) with available font
        convert -size 256x256 xc:'#2196F3' \
          -gravity center \
          -pointsize 72 \
          -fill white \
          -font Liberation-Sans-Bold \
          -annotate +0+0 'M5' \
          AppDir/M5Logger.png
        
        # Also place icon in standard location
        cp AppDir/M5Logger.png AppDir/usr/share/icons/hicolor/256x256/apps/M5Logger.png
        
        # Create .desktop file in ROOT of AppDir (this is crucial!)
        cat <<EOF > AppDir/M5Logger.desktop
        [Desktop Entry]
        Type=Application
        Name=M5Logger
        Comment=M5StickC Plus Bluetooth Data Logger
        Exec=M5Logger
        Icon=M5Logger
        Categories=Utility;
        Terminal=false
        StartupNotify=true
        EOF
        
        # Also create it in the standard location
        cp AppDir/M5Logger.desktop AppDir/usr/share/applications/M5Logger.desktop
        
        # Create AppRun script
        cat <<EOF > AppDir/AppRun
        #!/bin/bash
        HERE="\$(dirname "\$(readlink -f "\${0}")")"
        export PATH="\${HERE}/usr/bin:\${PATH}"
        export LD_LIBRARY_PATH="\${HERE}/usr/lib:\${LD_LIBRARY_PATH}"
        exec "\${HERE}/usr/bin/M5Logger" "\$@"
        EOF
        chmod +x AppDir/AppRun
        
        # Validate desktop file
        desktop-file-validate AppDir/M5Logger.desktop
        
        # Build AppImage
        ./appimagetool-x86_64.AppImage AppDir M5Logger.AppImage
        
        # Make it executable
        chmod +x M5Logger.AppImage
        
        # Verify the AppImage was created
        ls -la M5Logger.AppImage

    # Windows: .exe is already built in dist/
    - name: Package for Windows (.exe)
      if: matrix.os == 'windows-latest'
      run: |
        echo "Windows executable created successfully in dist/M5Logger.exe"
        dir dist\

    # Upload the build artifacts
    - name: Upload final installers
      uses: actions/upload-artifact@v4
      with:
        name: M5Logger-${{ matrix.os }}
        path: |
          dist/M5Logger*
          M5Logger.dmg
          M5Logger.AppImage
        retention-days: 30
